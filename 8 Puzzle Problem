import heapq

# Function to calculate the Manhattan distance heuristic
def manhattan_distance(state):
    distance = 0
    goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                row, col = divmod(state[i][j] - 1, 3)
                distance += abs(row - i) + abs(col - j)
    return distance

# Function to find possible moves
def find_possible_moves(state):
    moves = []
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                if i > 0:
                    moves.append((i - 1, j))
                if i < 2:
                    moves.append((i + 1, j))
                if j > 0:
                    moves.append((i, j - 1))
                if j < 2:
                    moves.append((i, j + 1))
                return moves

# Function to swap tiles
def swap_tiles(state, move):
    new_state = [row[:] for row in state]
    (i, j), (k, l) = move, find_blank(state)
    new_state[i][j], new_state[k][l] = new_state[k][l], new_state[i][j]
    return new_state

# Function to find the blank tile
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return (i, j)

# Function to perform A* search
def astar_search(initial_state):
    frontier = []
    visited = set()
    heapq.heappush(frontier, (0, manhattan_distance(initial_state), initial_state))
    
    while frontier:
        _, _, current_state = heapq.heappop(frontier)
        if current_state == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]:
            return current_state
        
        visited.add(tuple(map(tuple, current_state)))
        possible_moves = find_possible_moves(current_state)
        
        for move in possible_moves:
            new_state = swap_tiles(current_state, move)
            if tuple(map(tuple, new_state)) not in visited:
                cost = manhattan_distance(new_state)
                heapq.heappush(frontier, (cost, cost + manhattan_distance(new_state), new_state))
    return None

# Function to print the state
def print_state(state):
    for row in state:
        print(" ".join(str(cell) for cell in row))
    print()

# Example usage
initial_state = [
    [1, 2, 3],
    [4, 0, 5],
    [7, 8, 6]
]

print("Initial State:")
print_state(initial_state)

print("Solving...")
solution = astar_search(initial_state)

if solution:
    print("Solution Found:")
    print_state(solution)
else:
    print("No solution exists.")
